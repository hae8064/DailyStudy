- 컴파일: TS로 된 파일을 JS파일로 변환하는 작업

- 윕팩이란..?
- `Babel이란 ?

- 튜플이란: 배열의 특정 인덱스의 특정 타입을 지정하는 방법

→ let address: [string, number] = [’dsa’, 10];

- 옵셔널 파라미터

→ 특정 파라미터를 선택적으로 붙여주고 싶을때는 파라미터에 ?를 붙인다.

function log(a: string, b?: string) {}

- 인터페이스

반복되는 타입들을 하나의 인터페이스로 정의하고 반복되는 타입을 인터페이스로 정의 가능

```tsx
//함수에 인터페이스 활용
function getUser(user: User) {
  console.log(user);
}

const capt = {
  name: '캡틴',
  age: 100
};

getUser(capt);
```

- 함수 구조를 정의하는 인터페이

API를 호출해와서 API 스펙이 어떤지 타입을 지정 해 놓는 방식

- 인덱싱 방식을 활용한 인터페이스

```tsx
//인덱싱
interface StringArray {
  [index: number]: string;
}

let arr: StringArray = ['a', 'b', 'c'];
arr[0];
arr[0] = 10;  //오류 나옴 타입을 string으로 반환값을 지정해서
arr[0] = 'adsa'     //값이 잘 나옴 반환값을 스트링 형식에 맞아서

```

- 딕셔너리 패턴

→ RegExp 타입 존

```tsx
// 딕셔너리 패턴
interface StringRegexDictionary {
  [key: string]: RegExp;
}

let obj: StringRegexDictionary = {
  cssFile: /\.css$/,
  jsFile: /\.js$/,
};
```

cssFile, jsFIle 정규 표현

- 인터페이스 확장

OOP - 상속, 자바스크립트 - prototype 등

```tsx
//인터페이스 확장
interface Person {
  name: string;
  age: number;
}

interface Developer extends Person {
  language: string;
}

let captain: Developer = {
  age: 100,
  name: '캡틴',
  language: 'ts',
};
```

extends 키워드를 사용해 interface를 상속 받아서 사용이 가능하다.

- 타입 별칭

type 키워드를 작성

인터페이스와 타입의 차이

→ 타입 별칭: 정의된 타입에 대해 쉽게 참고할 수 있게 이름을 부여하는 방식 vscode내에서 타입을 가리키면 타입을 보여줌

→ 타입은 확장이 되지 않음

→ 인터페이스는 확장이 가능함 (extends키워드를 이용해서)

→ 가능한한 타입보다는 인터페이스 사용하는걸 권장

- 연산자를 이용한 유니온 타입

→ 유니온 타입: 하나의 타입 이상을 사용할 수 있는거 

string | number 이런식으로 | 하나를 사용함

장점: if문으로 코드를 타입에 따라 정의가 가능하고, 정의하지 않은 타입인경우 예외처리가 가능하다.

```tsx
let shho: string | number | boolean;

function logMessage(value: string | number) {
  if (typeof value === 'number') {
    value.toLocaleString();
  }
  if (typeof value === 'string') {
    value.toString();
  }
	throw new TypeError('value must be string or number');
}
```

타입 가드: 특정 타입으로 타입의 범위를 좁혀나가는 과정

인터페이스 자체를 유니온 타입으로 받을 수 있음

```tsx
interface Developer {
  name: string;
  skill: string;
}

interface Person {
  name: string;
  age: number;
}

function askSomeone(someone: Developer | Person) {
    someone.name
}
```

askSomeone 함수에서 someone.skill이나 someone.age를 사용 못하는 이유는 공통된 속성이 아니여서 타입 에러가 발생할 수 있기 때문에 유니온타입인 경우에는 공통된  속성만 가능하다.

그래서 만야ㅐㄱ skill이나 age를 사용하려면 if문을 사용해 예외처리를 하여 특정 타입에 맞춰 사용해야한다.

- &연산

|연산과의 차이는 특정 타입을 전부 만족하는 타입

유니온 타입 경우에는 타입 가드에 따른 추가적인 처리가 필요하지만, &연산은 모든 속성과 타입을 포함하기 때문에 &연산이 가능하다.

실무에서 더 많이 사용하는 타입은 유니온( | )타입을 사용

- 유니온 타입과 인터섹션 타입 차이점

 

- 이넘 (Enums): 특정 값들의 집합을 의미하는 자료형 (목록 등)

→ 숫자형 이넘, 문자형 이넘

→ 이넘을 사용시 별도의 값을 지정하지 않으면 숫자가 결과로 출력 

```tsx
enum Shoes {
  Nike,
  Adidas,
}

let myShoes = Shoes.Nike;
console.log(myShoes);

```

Shoes.Nike를 입력하면 0이 출력됨, Adidas는 2가 출력됨 점점 1씩 증가 함

- 문자형 이넘
- 이넘 활용 사례

다양한 형태의 문자를 구체적으로 정의하는 방법 (이넘)

- 클래스 문

클래스는 자바스크립트에서 ES6부터 사용이 가능해

- 자바스크립트 프로토타입 소개

객체가 가지고 있는 정보를 상속 받아서 사용 가능한 형식

```jsx
let user = { name: 'capt', age: 100 };

// let admin = { name: 'capt', age: 100, role: 'admin' };
let admin = {};
admin.__proto__ = user;

console.log(admin.name);
```

__**proto__**를 사용해서 프로토타입을 지정 가능하다.

- 프로토타입과 클래스와의 관계

- 타입스크립트의 클래스 문법

- 제네릭: 재사용성이 높은 컴포넌트를 만들때 주로 사용함

<T> 이러한 형식..

- 기존 타입 정의 방식과 제너릭 방식의 차이점

타입이 정확하게 추론이 돼야만 특정 메소드를 사용이 가능한 상황일때 union타입 지정으로 지정할 경우에는 타입 추론이 애매해져서 함수 사용이 불가

→ 제너릭의 장점

: 제너릭 사용함ㄴ 함수를 사용할 때 타입을 선언 해 주는거임

```tsx
function logText<T>(text: T): T {
  console.log(text);
  return text;
}

//함수를 호출할 때 타입을 정의하는거임.. 제너릭 사용시
const str2 = logText<string>('dsa');

const login = logText<boolean>(true);
```

이렇게 함수를 제네릭 타입으로 선언 해 놓고 

함수를 호출할 때 타입을 <>제네릭으로 호출 해 주면 특정 타입에 따라 함수를 불러올 수 있

- 드롭다운 형식 사용시 제네릭 타입으로 많이들 사용

```tsx
interface Dropdown<T> {
  value: T;
  selected: boolean;
}

const obj3: Dropdown<number> = { value: 10, selected: false };
```

인터페이스 제네릭 사용해서 타입을 동적으로 선언 가능하다.

- 제네릭의 타입 제한

```tsx
//제네릭의 타입 제한
function logTextLength<T>(text: T): T {
  return text.length;
}

logTextLength<string>('hi');

//제네릭의 타입 제한
function logTextLength<T>(text: T[]): T {
  return text.length;
}

logTextLength<string>('hi');
```

text.length는 에러가 나옴.. 

이유는 ? T[ ] 배열을 사용하면 그제서야 text.length를 사용이 가능하다.

```tsx
// 제네릭 타입 제한 2 - 정의된 타입 이용하기
interface LengthType {
  length: number;
}

function logTextLength<T extends LengthType>(text: T): T {
  text.length;
  return text;
}
```

- keyof로 제네릭 타입 제한하기
