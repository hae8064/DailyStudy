*Node 시작하기
-Node는 서버가 아니다. V8자바스크립트 엔진으로 빌드된 자바스크립트 런타임이다.
이때, 런타임이란? 자바스크립트를 실행시키는 실행기라고 생각하면 된다.
-Node는 서버의 역할 수행한다. 

-Nonblocking I/O: 오래 걸리는 함수를 백그라운드로 보내서 다음 코드가 먼저 실행되게 하고, 나중에
오래걸리는 함수를 실행
-동기/비동기: 동기면 코드가 순서대로 실행되고, 비동기면 코드가 순서대로 실행되지 않고 효율성에 따라 실행된다.

-Node는 싱글스레드라고 한다. 프로세스안에서 여러개의 스레드가 실행되는데 직접 다룰 수 있는 스레드는
하나기 때문에 싱글 스레드라고 표현한다.


*자바스크립트 문법
-호출 스택: 맨처음에 파일 실행되는 순간 anonymous라는 가상 전역 컨텍스트가 호출된다.
(스택의 기본 개념: 아래에서부터 쌓이고 위에서 부터 실행됨)
-자바스크립트는 호출스택, 백그라운드, 메모리, 태스크 큐가 존재한다. 또한 이벤트 루프도 있음
-비동기 함수는 백그라운드에 넣어준다. (호출스택과 백그라운드가 동시에 실행됨)
-백그라운드에서 태스크 큐로 보내줌
-파일 다 실행되면 anonymous 사라진다.
-호출스택이 비어 있을 때 태스크 큐에서 이동한다.
-setTimeout은 무조건 백그라운드를 한번 거쳐야한다. (0초여도 백그라운드 거침)
-Promise는 내부까지는 동기다. 그래서 그 안에서 같이 실행된다. then을 만나는 순간 비동기로 바뀜 그래서 백그라운드로 이동
-Promise가 timer보다 먼저 호출된다. 우선순위에서 promise가 높다.

-var, const, let 개념
var은 블록 스코프 밖에서도 접근이 가능하다. (블록스코프를 무시함) => 이 때, function 스코프는 취급한다.

-클래스
클래스 내부의 생성자와 instance메소드 static메소드를 작성 가능

-Promise, async/await
프로미스: 내용이 실행은 되지만, 결과를 아직 반환하지 않은 객체, Then을 붙이면 결과 반환함
promise.allSettled로 실패한 것만 추러냄
await이 then역할을 한다고 볼 수 있음. 실행 순서는 오른쪽에서 왼쪽
async도 프로미스라고 볼 수 있음. async함수에서 return값을 const 변수명 = await async함수 이렇게 가져올 수 있음
