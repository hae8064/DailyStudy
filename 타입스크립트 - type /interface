- interface
    
    ```tsx
    interface AnimalInterface {
      species: string
      height: number
      weight: number
    }
    
    interface AfricaAnimal extends AnimalInterface {
      continent: string
    }
    ```
    
    - interface는 extends를 사용해서 확장한다.

- type
    
    ```tsx
    type AnimalType = {
      species: string,
      height: number,
      weight: number
    }
    
    type AfricaAnimal = AnimalInterface & {
      continent: string
    }
    ```
    
    - type은 특수문자 &로 확장한다.

- 선언적 확장
    - interface에서 할 수 있는 대부분의 기능들은 type에서 가능하지만, type은 새로운 속성을 추가하기 위해 다시 같은 이름으로 선언할 수 없지만, interface는 항상 선언적 확장이 가능하다.
    
    ```tsx
    interface Animal {
      weight: number;
    }
    
    interface Animal {
      height: number;
    }
    
    const tiger: Animal = {
      weight: 100,
      height: 200,
    };
    console.log(tiger);
    
    type _Animal = {
      weight: number;
    };
    
    type _Animal = {//error : 식별자가 중복됨
      height: string;
    };
    ```
    

- interface는 객체에만 사용이 가능하다.
    
    ```tsx
    interface AnimalInterface {
      name: string
    }
    
    type AnimalType = {
      name: string
    }
    
    type AnimalOnlyString = string
    type AnimalTypeNumber = number
    
    interface X extends string {} // 불가능
    ```
    
    - interface는 리터럴 타입으로 확장할 수 없다.
    - 리터럴 타입이란 ? 데이터(값) 그 자체를 뜻한다. 즉 변수에 넣는 변하지 않는 데이터를 의미
    - ex) const a = 1;
        
        → 여기서, a는 상수고, 1은 리터
        
    
- computed value의 사용
    
    ```tsx
    type names = 'firstName' | 'lastName'
    
    type NameTypes = {
      [key in names]: string
    }
    
    const yc: NameTypes = { firstName: 'hi', lastName: 'yc' }
    
    interface NameInterface {
      // error
      [key in names]: string
    }
    ```
    
    - type은 가능하지만, interface는 불가능

- 성능적인 측면
    - interface와 다르게, type은 원시 타입이 올수도 있어서, 충돌이 나서 제대로 merge가 안되는 경우에 never가 떨어진다.
    
    ```tsx
    type type2 = { a: 1 } & { b: 2 } // 잘 머지됨
    type type3 = { a: 1; b: 2 } & { b: 3 } // resolved to `never`
    
    const t2: type2 = { a: 1, b: 2 } // good
    const t3: type3 = { a: 1, b: 3 } // Type 'number' is not assignable to type 'never'.(2322)
    const t3: type3 = { a: 1, b: 2 } // Type 'number' is not assignable to type 'never'.(2322)
    ```
    
    - type간 속성을 merge할 때 주의를 필요로 한다.
    - 객체에만 쓰는 용도라면 interface를 쓰는게 좋
    - 주로 interface를 사용하는게 좋다고 한다.
