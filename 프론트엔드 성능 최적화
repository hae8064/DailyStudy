> 1장 블로그 서비스 최적화
- 이 장에서 학습할 최적화 기법
	- 이미지 사이즈 최적화
	- 코드 분할
	- 텍스트 압축
	- 병목 코드 최적화
		- 특정 자바스크립트 코드 때문에 서비스가 너무 느리게 다운로드되나 느리게 싱행되는 경우가 있다. 이때 어떤 코드가 무엇 때문에 느린지 몰라서 코드만 보며 한참을  헤맨다
			- 이ㅏ같은 서비스를 느리게 만드는 코드를 병목 코드라고 한다.
- 분석 도구
	- webpack-bundle-analyzer: 개발자 도구에 있는 툴이 아니라, 직접 설치해야하는 툴

- LightHouse 검사 결과
	- FCP(First Contentful Paint)
		- 페이지가 로드될 때 브라우저가 DOM컨텐츠의 첫번째 부분을 렌더링 하는데 걸리는 시간에 관한 지표
	- SI (Speed Index)
		- 일부 컨텐츠가 조금 더 빠르게 로드되면 결국 동시에 로딩이 되더라도 일부 컨텐츠가 빠르게 나타난 부분이 SI총점으로 더 높다. 더 빨리 로드된 것으로 판단됨
	- LCP (Largest Contentful Paint)
		- 페이지가 로드 될 때 화면 내에 있는 가장 큰 이미지나 텍스트 요소가 렌더링되기 까지 걸리는 시간을 나타내는 지표
	- TTI (Time To Interactive)
		- 사용자가 페이지와 상호 작용이 가능한 시점까지 걸리는 시간을 측정한 지표
		- 이 시점전까지 화면이 보이더라도 클릭 같은 입력이 동작하지 않는다.
	- TBT (Total Blocking Time)
		- 페이지가 클릭, 키보드 입력 등의 사용자 입력에 응답하지 않도록 차단된 시간을  총합한 지표
	- CLS(Cumulative Layout Shift)
		- 예기치 못한 레이아웃 이동을 측정한 지표
		- 

- 문자열 제거하는데, substring과 concat함수 대신 replace함수를 사용 가능하다.
	- 하지만 replace로는 하나하나 변경하는데 용이하지만, 여러개를 한번에 제거하기에는 힘듬
	- 그럴때는 정규 표현식을 사용해서 제거하는게 좋음

- webpack 번들러 크기 확인 하는 라이브러
	- cra-bundle-analyzer
	- 이 라이브러릴 npm에서 다운받고 사용하면 서비스의 번들 분석 결과가 나온다.

- 코드 분할
	- 페이지에서 필요한 코드만 따로 로드 해 불필요한 코드를 로드하지 않아 더욱 빨라진다.
	- 코드 분할을 하는 가장 좋은 방법은 동적 import를 사용하는 방법이다.
		- 동적 import의 문제점: Promise형태로 모듈을 반환한다. 
		- 리액트에서는 이를 해결하기 위해서 lazy와 suspense를 제공한다.

- 텍스트 압축
	- Html css js를 압축해서 파일을 로드 해야한다.
	- 압축 여부를 확인하려면 HTTP의 헤더를 살펴보면 된다.
	- Network패널에 Headers 탭에 Content-Encoding을 보면 압축이 되어 있는걸 볼 수 있다
	- 
